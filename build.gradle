import java.text.SimpleDateFormat

buildscript {
    ext.enable_plugin_kotlin = true

    ext.getGitHash = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (Exception ignored) {
            return 'unknown'
        }
    }

    ext {
        versions = [
                dynamicanimation       : "1.0.0",
                appcompat              : "1.2.0",
                preferencev14          : "1.0.0",
                recyclerview           : "1.1.0",
                preference             : "1.1.1",
                material               : "1.3.0-alpha04",
                constraintlayout       : "2.0.0-rc1",
                customactivityoncrash  : "2.2.0",
                colorpicker            : "1.1.0",
                hokolite               : "0e21db9ae5",
                sunrisesunsetcalculator: "1.2",
                okhttp                 : "4.8.0",
                logginginterceptor     : "4.8.0",
                fuzzywuzzy             : "1.2.0",
                junit                  : "1.1.1",
                mockito                : "1.9.5",
                dexmaker               : "1.2",
                testjunit              : "1.1.1",
                testrules              : "1.2.0",
                uiautomator            : "2.2.0",
                annotation             : "1.1.0",

                kotlin                 : "1.4.10",
                protobuf               : "0.8.12"
        ]
    }

    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath "com.google.protobuf:protobuf-gradle-plugin:${versions.protobuf}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
}

String PREBUILTS_DIR = "prebuilts"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    def name = "0.6.3"
    def code = 101

    defaultConfig {
        minSdkVersion 25
        targetSdkVersion 29
        applicationId "com.saggitt.omega"
        ndk.abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        versionName name
        versionCode code

        buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", "${findAndroidLocales()}"
        buildConfigField "boolean", "FEATURE_SETTINGS_SEARCH", "true"
        buildConfigField "String", "BUILD_DATE", "\"${getBuildDate()}\""
        buildConfigField "String", "GITHASH", "\"${getGitHash()}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.flags'
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions "app", "recents", "custom"

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.saggitt.omega'
            testApplicationId 'com.android.launcher3.tests'
        }

        withQuickstep {
            dimension "recents"
            minSdkVersion 25
        }

        withoutQuickstep {
            dimension "recents"
        }

        omega {
            applicationId 'com.saggitt.omega'
            dimension "custom"
        }
    }

    // Disable release builds for now
    /*android.variantFilter { variant ->
        if (variant.buildType.name.endsWith('release')) {
            variant.setIgnore(true)
        }
    }*/
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        abortOnError false
        checkReleaseBuilds false
    }
    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
            }
        }

        debug {
            manifest.srcFile "AndroidManifest.xml"
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src', 'tests/tapl']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
            manifest.srcFile "AndroidManifest.xml"
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        omega {
            res.srcDirs = ['Omega/res']
            java.srcDirs = ['Omega/src', 'Omega/src_ui_overrides']
            manifest.srcFile 'Omega/AndroidManifest.xml'
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xbootclasspath/p:${PREBUILTS_DIR}/libs/framework.jar")
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
    }
}

apply from: 'Omega/smali.gradle'
repositories {
    jcenter()
    google()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation "androidx.legacy:legacy-preference-v14:${versions.preferencev14}"
    implementation "androidx.dynamicanimation:dynamicanimation:${versions.dynamicanimation}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "androidx.preference:preference-ktx:${versions.preference}"

    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "cat.ereza:customactivityoncrash:${versions.customactivityoncrash}"
    implementation "com.jaredrummler:colorpicker:${versions.colorpicker}"
    implementation "com.github.LawnchairLauncher:hoko-lite:${versions.hokolite}"
    implementation "com.luckycatlabs:SunriseSunsetCalculator:${versions.sunrisesunsetcalculator}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.logginginterceptor}"
    implementation "me.xdrop:fuzzywuzzy:${versions.fuzzywuzzy}"

    implementation project(':IconLoader')
    implementation fileTree(dir: "${PREBUILTS_DIR}/libs", include: 'launcher_protos.jar')
    implementation fileTree(dir: "${PREBUILTS_DIR}/libs", include: 'libGoogleFeed.jar')

    // Recents lib dependency
    withQuickstepImplementation fileTree(dir: "${PREBUILTS_DIR}/libs", include: 'sysui_shared.jar')

    // Required for AOSP to compile. This is already included in the sysui_shared.jar
    withoutQuickstepImplementation fileTree(dir: "${PREBUILTS_DIR}/libs", include: 'plugin_core.jar')

    // Tools
    if (enable_plugin_kotlin) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    }

    implementation "androidx.test.ext:junit:${versions.testjunit}"
    androidTestImplementation "org.mockito:mockito-core:${versions.mockito}"
    androidTestImplementation "com.google.dexmaker:dexmaker:${versions.dexmaker}"
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:${versions.dexmaker}"
    androidTestImplementation "androidx.test.ext:junit:${versions.testjunit}"
    androidTestImplementation "androidx.test:rules:${versions.testrules}"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${versions.uiautomator}"
    androidTestImplementation "androidx.annotation:annotation:${versions.annotation}"
}

protobuf {
    // Configure the protoc executable
    protoc {
        // later versions seems to miss on javanano support
        artifact = 'com.google.protobuf:protoc:3.0.0'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "java_package=search.proto|com.google.android.apps.nexuslauncher.search.nano"
                        option "java_package=smartspace.proto|com.google.android.apps.nexuslauncher.smartspace.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns used android languages as a buildConfig array: {'de', 'it', ..}"
static String findAndroidLocales() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-') && !it.canonicalPath.contains("build" + File.separator + "intermediates")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml") && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))
                }
            }
        }
    }
    return '{' + langs.collect { "\"${it}\"" }.join(",") + '}'
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns the build date in a RFC3339 compatible format. TZ is always converted to UTC
static String getBuildDate() {
    final SimpleDateFormat RFC3339_LIKE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    RFC3339_LIKE.setTimeZone(TimeZone.getTimeZone("UTC"))
    return RFC3339_LIKE.format(new Date())
}
